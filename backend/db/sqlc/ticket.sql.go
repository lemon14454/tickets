// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ticket.sql

package db

import (
	"context"
)

const getRowTickets = `-- name: GetRowTickets :many
SELECT id, user_id, order_id, event_id, zone_id, row, seat, created_at, updated_at FROM tickets
WHERE event_id = $1
AND zone_id = $2
AND row = $3
`

type GetRowTicketsParams struct {
	EventID int64 `json:"event_id"`
	ZoneID  int64 `json:"zone_id"`
	Row     int32 `json:"row"`
}

func (q *Queries) GetRowTickets(ctx context.Context, arg GetRowTicketsParams) ([]Ticket, error) {
	rows, err := q.db.Query(ctx, getRowTickets, arg.EventID, arg.ZoneID, arg.Row)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderID,
			&i.EventID,
			&i.ZoneID,
			&i.Row,
			&i.Seat,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
