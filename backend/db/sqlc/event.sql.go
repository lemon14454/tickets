// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package db

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    host_id,
    start_at,
    name
) VALUES (
    $1, $2, $3
)
RETURNING id, name, host_id, start_at, created_at, updated_at, status
`

type CreateEventParams struct {
	HostID  int64     `json:"host_id"`
	StartAt time.Time `json:"start_at"`
	Name    string    `json:"name"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent, arg.HostID, arg.StartAt, arg.Name)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HostID,
		&i.StartAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const createEventZone = `-- name: CreateEventZone :one
INSERT INTO event_zones (
    zone,
    rows,
    seats,
    event_id,
    price
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, zone, event_id, rows, seats, price
`

type CreateEventZoneParams struct {
	Zone    string `json:"zone"`
	Rows    int32  `json:"rows"`
	Seats   int32  `json:"seats"`
	EventID int64  `json:"event_id"`
	Price   int32  `json:"price"`
}

func (q *Queries) CreateEventZone(ctx context.Context, arg CreateEventZoneParams) (EventZone, error) {
	row := q.db.QueryRow(ctx, createEventZone,
		arg.Zone,
		arg.Rows,
		arg.Seats,
		arg.EventID,
		arg.Price,
	)
	var i EventZone
	err := row.Scan(
		&i.ID,
		&i.Zone,
		&i.EventID,
		&i.Rows,
		&i.Seats,
		&i.Price,
	)
	return i, err
}

const getAllEvent = `-- name: GetAllEvent :many
SELECT id, name, status, start_at FROM events
`

type GetAllEventRow struct {
	ID      int64       `json:"id"`
	Name    string      `json:"name"`
	Status  EventStatus `json:"status"`
	StartAt time.Time   `json:"start_at"`
}

func (q *Queries) GetAllEvent(ctx context.Context) ([]GetAllEventRow, error) {
	rows, err := q.db.Query(ctx, getAllEvent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllEventRow{}
	for rows.Next() {
		var i GetAllEventRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.StartAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventByID = `-- name: GetEventByID :one
SELECT name, status, start_at FROM events
WHERE id = $1 limit 1
`

type GetEventByIDRow struct {
	Name    string      `json:"name"`
	Status  EventStatus `json:"status"`
	StartAt time.Time   `json:"start_at"`
}

func (q *Queries) GetEventByID(ctx context.Context, id int64) (GetEventByIDRow, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i GetEventByIDRow
	err := row.Scan(&i.Name, &i.Status, &i.StartAt)
	return i, err
}

const getEventZone = `-- name: GetEventZone :many
SELECT zone, rows, seats, price FROM event_zones
WHERE event_id = $1
`

type GetEventZoneRow struct {
	Zone  string `json:"zone"`
	Rows  int32  `json:"rows"`
	Seats int32  `json:"seats"`
	Price int32  `json:"price"`
}

func (q *Queries) GetEventZone(ctx context.Context, eventID int64) ([]GetEventZoneRow, error) {
	rows, err := q.db.Query(ctx, getEventZone, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEventZoneRow{}
	for rows.Next() {
		var i GetEventZoneRow
		if err := rows.Scan(
			&i.Zone,
			&i.Rows,
			&i.Seats,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventZones = `-- name: GetEventZones :many
SELECT id, zone, event_id, rows, seats, price FROM event_zones
WHERE event_id = $1
`

func (q *Queries) GetEventZones(ctx context.Context, eventID int64) ([]EventZone, error) {
	rows, err := q.db.Query(ctx, getEventZones, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventZone{}
	for rows.Next() {
		var i EventZone
		if err := rows.Scan(
			&i.ID,
			&i.Zone,
			&i.EventID,
			&i.Rows,
			&i.Seats,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHostEvent = `-- name: GetHostEvent :many
SELECT id, name, status, start_at, updated_at, created_at FROM events
WHERE host_id = $1
`

type GetHostEventRow struct {
	ID        int64       `json:"id"`
	Name      string      `json:"name"`
	Status    EventStatus `json:"status"`
	StartAt   time.Time   `json:"start_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedAt time.Time   `json:"created_at"`
}

func (q *Queries) GetHostEvent(ctx context.Context, hostID int64) ([]GetHostEventRow, error) {
	rows, err := q.db.Query(ctx, getHostEvent, hostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHostEventRow{}
	for rows.Next() {
		var i GetHostEventRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.StartAt,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
