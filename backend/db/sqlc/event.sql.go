// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package db

import (
	"context"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    host_id,
    name
) VALUES (
    $1, $2
)
RETURNING id, name, host_id, created_at, updated_at, status
`

type CreateEventParams struct {
	HostID int64  `json:"host_id"`
	Name   string `json:"name"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent, arg.HostID, arg.Name)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HostID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const createEventZone = `-- name: CreateEventZone :one
INSERT INTO event_zones (
    zone,
    rows,
    seats,
    event_id,
    price
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, zone, event_id, rows, seats, price
`

type CreateEventZoneParams struct {
	Zone    string `json:"zone"`
	Rows    int32  `json:"rows"`
	Seats   int32  `json:"seats"`
	EventID int64  `json:"event_id"`
	Price   int32  `json:"price"`
}

func (q *Queries) CreateEventZone(ctx context.Context, arg CreateEventZoneParams) (EventZone, error) {
	row := q.db.QueryRow(ctx, createEventZone,
		arg.Zone,
		arg.Rows,
		arg.Seats,
		arg.EventID,
		arg.Price,
	)
	var i EventZone
	err := row.Scan(
		&i.ID,
		&i.Zone,
		&i.EventID,
		&i.Rows,
		&i.Seats,
		&i.Price,
	)
	return i, err
}
